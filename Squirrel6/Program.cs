using CommandLine;
using SmashForge;
using System.Diagnostics;
using System.IO.Compression;
using OpenTK.Graphics.OpenGL;
using DirectXTexNet;
using static System.Net.Mime.MediaTypeNames;

namespace Squirrel {

    public class Program {

        public class Options {
            [Option('v', "verbose", Required = false, HelpText = "Set output to verbose messages.")]
            public bool Verbose { get; set; }

            [Option('q', "quiet", Required = false, HelpText = "Output nothing.")]
            public bool Quiet { get; set; }

            [Option("format", Required = false, HelpText = "Override the pixel format of the input file.", MetaValue = "Rgb,Bgr,Argb,Rgba,...")]
            public String ForcedPixelFormat { get; set; }
            public PixelFormat? ForcedPixelFormatEnum { get; set; }


            [Option("png-conv-format", Required = false, HelpText = "Override the pixel format of DDS files generated by PNG->DDS (see DirectX manual - DXGI_FORMAT).", MetaValue = "[0-134]")]
            public int ForcedPixelFormatPng { get; set; } = (int)DXGI_FORMAT.R8G8B8A8_UNORM_SRGB;

            [Option("intformat", Required = false, HelpText = "Override the internal pixel format of the input file.", MetaValue = "R32i,R32ui,Rg8i,...")]
            public String ForcedPixelInternalFormat { get; set; }
            public PixelInternalFormat? ForcedPixelInternalFormatEnum;

            [Option("compression", Required = false, HelpText = "Set compression for LMZ files.", MetaValue = "Optimal,Fastest,NoCompression")]
            public String LMZCompression { get; set; }
            public CompressionLevel? LMZCompressionEnum;

            [Option("endian", Required = false, HelpText = "Set endian for NUT files.", MetaValue = "Big,Little")]
            public String Endian { get; set; }
            public Endianness EndianEnum;

            [Option("output-png", Required = false, HelpText = "For NUT files, output png files instead of dds files.")]
            public bool OutputAsPng { get; set; }

            [Option("multi-nut", Required = false, HelpText = "(does not work) For NUT files, if multiple dds files are given, convert them into one .nut rather than one .nut per .dds. (also applies to LMZ repacking)")]
            public bool MultiNut { get; set; }

            [Option("folder-scan-limit", Required = false, HelpText = "Limit the folder scan to the following file type", MetaValue = "dds,png,nut,...")]
            public String FolderScanLimit { get; set; }

            [Option("skip-existing", Required = false, HelpText = "Skip existing output files instead of overwriting them.")]
            public bool SkipExistingFiles { get; set; }

            [Value(0, Required = true, HelpText = "The file to convert", MetaName = "Input File")]
            public string InputFile { get; set; }

            [Value(1, Required = false, HelpText = "The file or folder to output or blank for the current directory", MetaName = "Output File / Folder")]
            public string Output { get; set; }
        }

        static void RunOptions(Options opts) {
            o = opts;
        }

        public struct OutputFile {
            public string directory;
            public string filename;
            public string extension;

            public override string ToString() {
                return directory + "\\" + (filename ?? "<undef>") + /*"." +*/ (extension ?? "<undef>");
            }

            public string ToString(String opt_filename) {
                return directory + "\\" + (filename ?? Path.GetFileNameWithoutExtension(opt_filename)) + /*"." +*/ (extension ?? ".<undef>");
            }

            public bool ExistsAndShouldBeSkipped(String opt_filename) {
                return File.Exists(ToString(opt_filename)) && o.SkipExistingFiles;
            }
        }

        public static Options o;
        public static OutputFile of = new OutputFile();

        public static int Main(string[] args) {
            Parser.Default.ParseArguments<Options>(args).WithParsed(RunOptions);
            if (o == null) {
                return 1;
            }

            if (o.ForcedPixelFormat != null) {
                if (!Enum.TryParse(o.ForcedPixelFormat, out PixelFormat format)) {
                    WriteLineIfNotQuiet("Invalid pixel format, valid formats: " + String.Join(", ", Enum.GetNames(typeof(PixelFormat))));
                    return 1;
                }
                o.ForcedPixelFormatEnum = format;
            }
            if (o.ForcedPixelInternalFormat != null) {
                if (!Enum.TryParse(o.ForcedPixelInternalFormat, out PixelInternalFormat format)) {
                    WriteLineIfNotQuiet("Invalid internal pixel format, valid formats: " + String.Join(", ", Enum.GetNames(typeof(PixelInternalFormat))));
                    return 1;
                }
                o.ForcedPixelInternalFormatEnum = format;
            }
            if (o.LMZCompression != null) {
                if (!Enum.TryParse(o.LMZCompression, out CompressionLevel level)) {
                    WriteLineIfNotQuiet("Invalid compression level");
                    return 1;
                }
                o.LMZCompressionEnum = level;
            }
            if (o.Endian != null) {
                if (o.Endian == "Big") {
                    o.EndianEnum = Endianness.Big;
                } else if (o.Endian == "Little") {
                    o.EndianEnum = Endianness.Little;
                } else {
                    WriteLineIfNotQuiet("Invalid endianness");
                    return 1;
                }
            }

            WriteLineIfVerbose("Verbose output enabled");

            if (o.Output == null) {
                of.directory = Path.GetDirectoryName(o.InputFile);
                WriteLineIfVerbose("No output directory set. Using input file directory: " + o.Output);
            } else {
                if (Directory.Exists(o.Output)) {
                    of.directory = o.Output;
                } else {
                    of.directory = Path.GetDirectoryName(o.Output);
                    of.filename = Path.GetFileNameWithoutExtension(o.Output);
                    of.extension = Path.GetExtension(o.Output);
                    if (String.IsNullOrWhiteSpace(of.extension)) {
                        of.extension = null;
                    }
                }
            }
            if (String.IsNullOrEmpty(of.directory)) {
                of.directory = ".";
            }

            WriteLineIfVerbose("Output set to: " + of);

            if (Path.GetExtension(o.InputFile) == ".png") {
                PngToDds(o.InputFile, of);
            } else if (Path.GetExtension(o.InputFile) == ".nut") {
                Extract(o.InputFile, of);
            } else if (Path.GetExtension(o.InputFile) == ".dds") {
                List<string> infile = new List<string> {
                    o.InputFile
                };
                if (of.extension == ".png" || o.OutputAsPng) {
                    ToPng(infile, of);
                } else {
                    Merge(infile, of);
                }
            } else if (Path.GetExtension(o.InputFile) == ".lmz") {
                ExtractLMZ(o.InputFile, of);
            } else if (Path.GetExtension(o.InputFile) == ".pac") {
                ExtractMarioKartPac(o.InputFile, of);
            } else if (Directory.Exists(o.InputFile)) {
                WriteLineIfVerbose("Checking directory: " + o.InputFile);
                bool is_dds = false;
                bool is_png = false;
                bool is_nut = false;
                bool is_lm = false;
                List<string> validfiles = new List<string>();
                foreach (string subfile in Directory.EnumerateFiles(o.InputFile)) {
                    if (Path.GetExtension(subfile) == ".lm") {
                        is_lm = true;
                    }
                }

                if (is_lm) {
                    WriteLineIfNotQuiet("Detected extracted LMZ file, repacking...");
                    CompressLMDtoLMZ(o.InputFile, of);
                } else {
                    foreach (string subfile in Directory.EnumerateFiles(o.InputFile)) {
                        if (Path.GetExtension(subfile) == ".nut" && (o.FolderScanLimit == null || o.FolderScanLimit == "nut")) {
                            is_nut = true;
                            validfiles.Add(subfile);
                        } else if (Path.GetExtension(subfile) == ".dds" && (o.FolderScanLimit == null || o.FolderScanLimit == "dds")) {
                            is_dds = true;
                            validfiles.Add(subfile);
                        } else if (Path.GetExtension(subfile) == ".png" && (o.FolderScanLimit == null || o.FolderScanLimit == "png")) {
                            is_png = true;
                            validfiles.Add(subfile);
                        }
                    }
                }

                WriteLineIfVerbose(String.Format("is_nut: {0}, is_dds/is_png: {1}, is_lm: {2}", is_nut, is_dds, is_lm));

                if (is_nut && (is_dds || is_png)) {
                    WriteLineIfNotQuiet("Mixed dds and nut files in this folder, uncertain what to do.");
                    return 1;
                } else if (is_nut) {
                    foreach (string validinfile in validfiles) {
                        Extract(validinfile, of);
                    }
                } else if (is_dds) {
                    if (o.OutputAsPng) {
                        ToPng(validfiles, of);
                    } else {
                        Merge(validfiles, of);
                    }
                } else if (!is_lm){
                    WriteLineIfNotQuiet("Nothing to do in this folder.");
                    return 1;
                }
            } else {
                WriteLineIfNotQuiet("You can't feed this to a squirrel! (Not a directory or unknown file type: " + Path.GetExtension(o.InputFile) + ")");
                return 1;
            }

            WriteLineIfVerbose("Done");
            if (Debugger.IsAttached) {
                Console.ReadLine();
            }
            return 0;
        }

        private static void PngToDds(string file, OutputFile output) {
            WriteLineIfNotQuiet("Converting " + file + " to DDS");

            var img = TexHelper.Instance.LoadFromWICFile(file, WIC_FLAGS.NONE);


            img = img.Convert((DXGI_FORMAT)o.ForcedPixelFormatPng, TEX_FILTER_FLAGS.DEFAULT, 1);

            WriteLineIfNotQuiet("Output file: " + output);

            if (!output.ExistsAndShouldBeSkipped(file)) {
                if (File.Exists(output.ToString())) {
                    File.Delete(output.ToString());
                }
                img.SaveToDDSFile(DDS_FLAGS.FORCE_DX9_LEGACY, output.ToString());

                File.SetLastWriteTime(output.ToString(), DateTime.Now);
            }

        }
        private static void ToPng(List<string> validfiles, OutputFile output) {
            if (validfiles.Count > 1 && output.filename != null) {
                throw new ArgumentException("can't convert multiple files into one single target file");
            }
            if (output.extension == null) {
                output.extension = ".png";
            }
            foreach (string file in validfiles) {
                WriteLineIfVerbose("Reading " + file);
                Dds dds = new Dds(new FileData(file));
                WriteLineIfVerbose("Writing " + output);
                if (!output.ExistsAndShouldBeSkipped(file)) {
                    dds.ToBitmap().Save(output.ToString(file), System.Drawing.Imaging.ImageFormat.Png);
                }
            }
        }

        private static void CompressLMDtoLMZ(String input, OutputFile output) {

            if (output.filename == null) {
                output.filename = Path.GetFileName(input).Replace(".lmd", "");
                WriteLineIfVerbose("Output filename corrected to: " + output);
            }

            foreach (string subfile in Directory.EnumerateFiles(input)) {
                if (Path.GetExtension(subfile) == ".png") {
                    WriteLineIfNotQuiet("Detected .png file " + subfile);
                    PngToDds(subfile, new OutputFile() {
                        directory = input,
                        filename = Path.GetFileNameWithoutExtension(subfile),
                        extension = ".dds"
                    });
                }
            }

            if (o.MultiNut) {
                List<string> validfiles = new List<string>();
                foreach (string subfile in Directory.EnumerateFiles(input)) {
                    if (Path.GetExtension(subfile) == ".dds") {
                        validfiles.Add(subfile);
                    }
                }
                Merge(validfiles, new OutputFile() {
                    directory = input,
                    filename = "image-00000",
                    extension = ".nut"
                });
            } else {
                foreach (string subfile in Directory.EnumerateFiles(input)) {
                    if (Path.GetExtension(subfile) == ".dds") {
                        Merge(new List<string> { subfile }, new OutputFile() {
                            directory = input,
                            filename = Path.GetFileNameWithoutExtension(subfile),
                            extension = ".nut"
                        });
                    }
                }
            }
            DirectoryInfo parent = Directory.GetParent(input);
            if (output.extension == null) {
                output.extension = ".lmz";
            }
            WriteLineIfVerbose("Zipping directory " + input + " to " + output);
            ZipHelper.CreateFromDirectory(input, output.ToString(), o.LMZCompressionEnum.GetValueOrDefault(CompressionLevel.Fastest), false, file => !file.EndsWith(".dds") && !file.EndsWith(".png"));

            File.SetLastWriteTime(output.ToString(), DateTime.Now);
        }

        private static void ExtractLMZ(string inputFile, OutputFile output) {
            WriteLineIfNotQuiet("Opening LMZ file: " + inputFile);
            ZipArchive zip = ZipFile.OpenRead(inputFile);

            if (!String.IsNullOrEmpty(output.extension)) {
                throw new ArgumentException("can't have a file extension for extracting LMZ");
            }

            if (output.filename == null) {
                output.filename = Path.GetFileNameWithoutExtension(inputFile) + ".lmd";
                output.extension = "";
            }

            WriteLineIfVerbose("Extracting to: " + output);
            zip.ExtractToDirectory(output.ToString(), true);
            foreach (string file in Directory.EnumerateFiles(output.ToString())) {
                if (Path.GetExtension(file) == ".nut") {
                    Extract(file, new OutputFile() {
                        directory = output.ToString(),
                        filename = Path.GetFileNameWithoutExtension(file),
                        extension = null
                    });
                }
            }
        }

        public static void WriteLineIfNotQuiet(string v) {
            if (!o.Quiet) {
                Console.WriteLine(v);
            }
        }

        public static void WriteLineIfVerbose(string v) {
            if (o.Verbose) {
                Console.WriteLine(v);
            }
        }

        private static void Extract(string infile, OutputFile output) {
            if (!File.Exists(infile)) {
                WriteLineIfNotQuiet("File not found: " + infile);
                return;
            }

            /*if (output.filename == null) {
                output.filename = Path.GetFileNameWithoutExtension(infile);
            }*/
            if (output.extension == null) {
                output.extension = o.OutputAsPng ? ".png" : ".dds";
            }

            WriteLineIfNotQuiet("Extracting: " + infile);
            WriteLineIfVerbose("... to: " + output);

            if (!Directory.Exists(output.directory)) {
                Directory.CreateDirectory(output.directory);
            }

            NUT nut = new NUT(infile);
            WriteLineIfVerbose("Endianness: " + nut.Endian);
            WriteLineIfVerbose("Nodes: " + nut.Nodes.Count);
            foreach (TreeNode t in nut.Nodes) {
                NutTexture tex = (NutTexture)t;
                WriteLineIfVerbose("Texture " + tex + ": " + tex.Width + "x" + tex.Height + " ["+tex.pixelFormat + " / " + tex.pixelInternalFormat + "], hash: " + tex.HashId);

                if (o.ForcedPixelFormatEnum != null) {
                    tex.pixelFormat = o.ForcedPixelFormatEnum.Value;
                }
                if (o.ForcedPixelInternalFormatEnum != null) {
                    tex.pixelInternalFormat = o.ForcedPixelInternalFormatEnum.Value;
                }

                Dds dds = new Dds();
                dds.FromNutTexture(tex);

                OutputFile of2 = new OutputFile() {
                    directory = output.directory,
                    extension = output.extension,
                    filename = output.filename ?? (nut.Nodes.Count > 1 ? tex.HashId.ToString() : Path.GetFileNameWithoutExtension(infile))
                };

                WriteLineIfVerbose("Saving as: " + of2);
                if (o.OutputAsPng) {
                    dds.ToBitmap().Save(of2.ToString(), System.Drawing.Imaging.ImageFormat.Png);
                } else {
                    dds.Save(of2.ToString());
                }
            }
        }

        private static void Merge(List<string> infiles, OutputFile outfile) {
            
            NUT nut = new NUT {
                Endian = o.EndianEnum ?? Endianness.Little
            };

            foreach (string file in infiles) {
                WriteLineIfNotQuiet("Adding image: " + file);
                Dds image = new Dds(new FileData(file));
                NutTexture tex = image.ToNutTexture();
                tex.pixelInternalFormat = PixelInternalFormat.Rgb32ui;
                WriteLineIfVerbose("Texture " + tex + ": " + tex.Width + "x" + tex.Height + " [" + tex.pixelFormat + " / "+tex.pixelInternalFormat+"], hash: " + tex.HashId);
                if (infiles.Count == 1) {
                    tex.HashId = 0; // I haven't seen multi-image NUTs yet
                }
                nut.Nodes.Add(tex);
            }

            if (outfile.filename == null) {
                outfile.filename = Path.GetFileNameWithoutExtension(infiles[0]);
            }

            if (outfile.extension == null) {
                outfile.extension = ".nut";
            }

            WriteLineIfVerbose("Merging as: " + outfile);
            File.WriteAllBytes(outfile.ToString(), nut.Rebuild());
        }

        private static void ExtractMarioKartPac(string inputFile, OutputFile output) {
            WriteLineIfNotQuiet("Opening PAC file: " + inputFile);
            byte[] data = File.ReadAllBytes(inputFile);
            if (data[0] == 'p' && data[1] == 'a' && data[2] == 'c' && data[3] == 'k') {
                for (int i = 4; i < data.Length; i++) {
                    if (data[i] == 'D' && data[i+1] == 'D' && data[i+2] == 'S') {
                        WriteLineIfVerbose("Found DDS at offset " + i);
                        byte[] data2 = new byte[data.Length - i];
                        Array.Copy(data, i, data2, 0, data2.Length);
                        OutputFile of2 = new OutputFile() {
                            directory = output.directory,
                            extension = ".dds",
                            filename = Path.GetFileName(inputFile)+"_"+i
                        };
                        Dds dds = new Dds(new FileData(data2));
                        WriteLineIfNotQuiet("Saving image: " + of2.ToString());
                        dds.Save(of2.ToString());
                    }
                }
            } else {
                WriteLineIfNotQuiet("Invalid format");
            }
        }
    }
}
